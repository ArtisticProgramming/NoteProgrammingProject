!function(e){var t={};function o(n){if(t[n])return t[n].exports;var l=t[n]={i:n,l:!1,exports:{}};return e[n].call(l.exports,l,l.exports,o),l.l=!0,l.exports}o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var l in e)o.d(n,l,function(t){return e[t]}.bind(null,l));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=3)}([function(e,t,o){"use strict";o.r(t),o.d(t,"noteJsModel",function(){return n});var n={test:{name:"mostafa"},getNotes:function(e,t,o,n){return axios.get("/GetNotes?page="+e+"&perPage="+t+o+n)},deleteNote:function(e){return axios.get("/DeleteNote?id="+e)}}},function(e,t,o){"use strict";o.r(t),o.d(t,"codeMirrorComponent",function(){return n});const n=Vue.component("code-mirror",{template:"<textarea>{{body}}</textarea>",props:["body","lang","index"],methods:{methodThatForcesUpdate(){}},mounted:function(){var e=this;console.log(this.lang);var t=$(this.$el);CodeMirror.fromTextArea(t[0],{mode:this.lang,lineNumbers:!0,styleActiveLine:!0,matchBrackets:!0,viewportMargin:1/0}).on("change",t=>{e.$emit("input-text-area",{index:e.index,value:t.getValue()})})},beforeDestroy:function(){console.log(t);let e=0;for(e=0;e<$(".CodeMirror").length;e++){var t=$(".CodeMirror")[e];void 0!==t&&(t.CodeMirror.setOption("mode","text/x-csrc"),t.CodeMirror.getWrapperElement().parentNode.removeChild(t.CodeMirror.getWrapperElement()),t.CodeMirror=null)}},destroyed:function(){}})},function(e,t,o){"use strict";o.r(t),o.d(t,"selectize",function(){return n});const n=Vue.component("selectize",{props:["options","value","url"],data:()=>({selectValue:"1234"}),template:"  \n    <select >\n    <slot></slot>\n    </select>",mounted:function(){var e=this,t=$(this.$el).selectize({maxItems:1,delimiter:",",persist:!1,items:["sdf","sdfsdf"],renderCache:!1,create:function(e){return console.log("Create"),{newTag:!0,value:e,text:e}},load:function(t,o){if(console.log("---LOAD---"),!t.length)return o();this.clear(),this.clearOptions(),$.ajax({url:e.url+"?query="+t,cache:!1,type:"GET",error:function(){o()},success:function(e){console.log(e.model),o(e.model.slice(0,10))}})}});$(t).on("change",function(){var o=t[0].selectize;console.log(t[0].selectize.getValue()),console.log(t[0].selectize.getItem()),console.log(t[0].selectize.items);$.map(o.items,function(e){return console.log(o.options[e]),o.options[e]});this.selectValue=t[0].selectize.items[0],console.log(t[0].selectize),e.$emit("input-data",this.selectValue)})},watch:{value:function(e){console.log(e)},options:function(e){console.log(e)}},destroyed:function(){}})},function(e,t,o){o(4),o(5),o(6),o(7),o(8),o(0),o(1),e.exports=o(2)},function(e,t,o){"use strict";o.r(t);o(0);var n=o(1),l=o(2),i=new Vue({el:"#anapp",data:{message:"Create a Note",nodeModel:{bookMark:!1,title:"",projectType:{},technologyType:{},noteType:{},model:[{mainbody:"",desc:"",lang:"htmlmixed"}]},componentKey:1},components:{codeMirrorComponent:n.codeMirrorComponent,selectize:l.selectize},updated:function(){},methods:{submit(){axios.post("/PostAddNote",{model:this.nodeModel}).then(e=>{this.nodeModel={bookMark:!1,title:"",projectType:{},technologyType:{},noteType:{},model:[{mainbody:"",desc:"",lang:"htmlmixed"}],componentKey:1},this.componentKey+=1,$("#technology").select2("val",""),$("#project").select2("val",""),$("#nType").select2("val","")}).catch(e=>{alert(e)})},updateType(e){},updateTechnology(e){},updateProjectType(e){console.log(e),this.nodeModel.projectType=e},updateCodeMirrorText(e){console.log(e),this.nodeModel.model[e.index].mainbody=e.value},add(){this.nodeModel.model.push({mainbody:"",desc:"",lang:""})}},mounted(){}});$(document).ready(function(){window.getProjectValue=function(){var e=$("#project").select2("data");return console.log(e),e[0].text},$("#project").select2({tags:[],initSelection:function(e,t){console.log(i.projectType)},maximumInputLength:30,maximumSelectionSize:1,ajax:{url:"/GetProjectTypes",dataType:"json",quietMillis:100,data:function(e,t){return{query:e}},results:function(e,t){return{results:e.model}}},createSearchChoice:function(e,t){if(0===$(t).filter(function(){return 0===this.text.localeCompare(e)}).length)return{id:"$*NewTag*$",text:e}},multiple:!0}).select2("val",[]).on("change",function(e){i.projectType="";var t=$(this).select2("data")[0];console.log(t),void 0!==t&&(i.nodeModel.projectType.text=t.text,i.nodeModel.projectType.id=t.id),console.log(i.projectType)}),$("#technology").select2({tags:[],initSelection:function(e,t){},maximumInputLength:30,maximumSelectionSize:1,ajax:{url:"/GetTechnologies",dataType:"json",quietMillis:100,data:function(e,t){return{query:e}},results:function(e,t){return{results:e.model}}},createSearchChoice:function(e,t){if(0===$(t).filter(function(){return 0===this.text.localeCompare(e)}).length)return{id:"$*NewTag*$",text:e}},multiple:!0}).select2("val",[]).on("change",function(e){var t=$(this).select2("data")[0];void 0!==t&&(i.nodeModel.technologyType.text=t.text,i.nodeModel.technologyType.id=t.id)}),$("#nType").select2({initSelection:function(e,t){},ajax:{url:"/GetNoteTypes",dataType:"json",quietMillis:100,data:function(e,t){return{query:e}},results:function(e,t){return{results:e.model}}},createSearchChoice:function(e,t){if(0===$(t).filter(function(){return 0===this.text.localeCompare(e)}).length)return{id:"$*NewTag*$",text:e}}}).select2("val","").on("change",function(e){var t=$(this).select2("data");console.log(t),void 0!==t&&(i.nodeModel.noteType.text=t.text,i.nodeModel.noteType.id=t.id)})})},function(e,t,o){"use strict";o.r(t);var n=o(0),l=o(1);console.log(n.noteJsModel.test.name);var i="inactive";let r=1;var a=new Vue({el:"#app",data:{message:"Hello Vue!",searchModel:{searchTextBox:"",bookMark:!1},boxmodel:[],deleteModalNote:{id:0,index:0,text:""},componentKey:0},components:{codeMirrorComponent:l.codeMirrorComponent},updated:function(){},methods:{search:function(){r=1,this.loadNote(r,!0)},loadNote(e,t){let o="",l="";console.log(this.searchModel.searchTextBox),void 0!==this.searchModel.searchTextBox&&""!=this.searchModel.searchTextBox&&(o="&title="+this.searchModel.searchTextBox),void 0!==this.searchModel.bookMark&&0!=this.searchModel.bookMark&&(l="&bookMark="+this.searchModel.bookMark),n.noteJsModel.getNotes(e,8,o,l).then(e=>{t?(this.boxmodel=[],this.boxmodel=e.data.model):e.data.model.forEach(e=>{this.boxmodel.push(e)}),i="inactive",this.$nextTick(function(){this.componentKey+=1})})},OpenCloseNote(e){$("#oc-"+e),console.log($(this).parent().parent().children(".cardHeigth"));var t=$("#oc-"+e),o=$(t).parent().parent();return"100px"==$(t).css("height")?($(t).css("height","auto"),$(t).css("overflow-y","hidden"),$(o).removeClass("col-lg-6"),$(o).addClass("col-lg-12")):($(t).css("height","100px"),$(t).css("overflow-y","scroll"),$(o).removeClass("col-lg-12"),$(o).addClass("col-lg-6")),!1},openDeleteModal(e,t){console.log(e),this.deleteModalNote.id=e,this.deleteModalNote.index=t,this.$nextTick(function(){$("#deleteModal").modal("toggle")})},deleteNote(e,t){n.noteJsModel.deleteNote(e).then(e=>{this.$delete(this.boxmodel,t),this.$nextTick(function(){$("#deleteModal").modal("hide"),this.componentKey+=1})})}},mounted(){this.loadNote(r)}});$(window).scroll(function(){$(window).scrollTop()+$(window).height()>$(document).height()-5&&"inactive"==i&&(i="active",setTimeout(function(){r+=1,a.loadNote(r)},500))}),$("body").on("click",".OpenCloseNote",function(){})},function(e,t){!function(){window.noteUtilityJs=window.noteUtilityJs||{};var e=[];for(i=0;i<document.getElementsByClassName("mirrorCode").length;i++){var t=$($(".mirrorCode")[i]).attr("lang");console.log("lang = "+t);var o=CodeMirror.fromTextArea(document.getElementsByClassName("mirrorCode")[i],{mode:t,lineNumbers:!0,styleActiveLine:!0,matchBrackets:!0,viewportMargin:1/0});e.push(o)}$(document).ready(function(){$("#example thead tr").clone(!0).appendTo("#example thead"),$("#example thead tr:eq(1) th").each(function(t){var o=$(this).text();$(this).html('<input type="text" placeholder="Search '+o+'" />'),$("input",this).on("keyup change",function(){e.column(t).search()!==this.value&&e.column(t).search(this.value).draw()})});var e=$("#example").DataTable({orderCellsTop:!0,fixedHeader:!0})})}()},function(e,t){!function(e){"use strict";var t=1;function o(){e("body").toggleClass("sidebar-toggled"),e(".sidebar").toggleClass("toggled"),e(".sidebar").hasClass("toggled")&&e(".sidebar .collapse").collapse("hide")}e("body").on("click","#addprogrammingnotebody",function(){let o="code"+t;var n='<div class="form-group note-body">\n                          <textarea id="'+o+'" rows="8" name=\'code['+t+'][body]\' style="margin: 10px; "\n                          value="" class="code form-control"></textarea>\n                      </div',l='<div class="row">\n            <div class="form-group col-md-9"><input id="exampleInputEmail1" \n                type="text" aria-describedby="emailHelp"\n                    placeholder="Title" name="code['+t+'][desc]" class="form-control"></div>\n            <div box-id="'+o+'"  class="form-group col-md-3 selectlang">\n            <select class="form-control form-control" name="code['+t+'][codelang]">\n                    <option value="htmlmixed">Html</option>\n                    <option value="text/css"> CSS</option>\n                    <option value="text/javascript"> JavaScript</option>\n                    <option value="text/x-sql"> SQl</option>\n                    <option value="text/x-csharp"> C#</option>\n                    <option value="text/x-python"> Python</option>\n                    <option value="text/x-java"> Java</option>\n                    <option value="text/x-php"> PHP</option>\n                    <option value="text/x-c++src"> C++</option>\n                    <option value="text/x-csrc"> C</option>\n                    <option value="text/x-go"> Go</option>\n                    <option value="text/x-rsrc"> R</option>\n                    <option value="application/x-powershell"> PowerShell</option>\n                </select></div>\n            </div>';e(".note-body").last().after(l+n);CodeMirror.fromTextArea(document.getElementById(o),{lineNumbers:!0,styleActiveLine:!0,matchBrackets:!0,viewportMargin:1/0});t+=1}),e("body").on("change",".selectlang",function(){e(this).attr("box-id"),e(this).val()}),e("#searchBoxBtn").click(function(){var t=e("#searchBox").val();location.href="/Notes?title="+t}),o(),e("#sidebarToggle, #sidebarToggleTop").on("click",function(e){o()}),e(window).resize(function(){e(window).width()<768&&e(".sidebar .collapse").collapse("hide")}),e("body.fixed-nav .sidebar").on("mousewheel DOMMouseScroll wheel",function(t){if(e(window).width()>768){var o=t.originalEvent,n=o.wheelDelta||-o.detail;this.scrollTop+=30*(n<0?1:-1),t.preventDefault()}}),e(document).on("scroll",function(){e(this).scrollTop()>100?e(".scroll-to-top").fadeIn():e(".scroll-to-top").fadeOut()}),e(document).on("click","a.scroll-to-top",function(t){var o=e(this);e("html, body").stop().animate({scrollTop:e(o.attr("href")).offset().top},1e3,"easeInOutExpo"),t.preventDefault()})}(jQuery)},function(e,t){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,